{"ast":null,"code":"var _jsxFileName = \"/home/iteamandroid/Desktop/Learning/ReactJs/react-crud/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Register from \"./Components/Register\";\nimport List from \"./Components/List\";\nimport Task from \"./Components/Task\";\nfunction App() {\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [tasks, setTasks] = useState([]);\n  const registrationHandler = event => {\n    setEmail(email);\n    setPassword(password);\n    setIsRegistered(true);\n    event.preventDefault();\n  };\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    setTasks(tasks);\n  }, []);\n  const addTask = name => {\n    setTasks(prevTasks => [...prevTasks, {\n      name: name,\n      done: false\n    }]);\n  };\n  function removeTask(indexToRemove) {\n    setTasks(prev => {\n      return prev.filter((taskObject, index) => index !== indexToRemove);\n    });\n  }\n  function updateTaskDone(taskIndex, newdone) {\n    setTasks(prev => {\n      const newTasks = [...prev];\n      newTasks[taskIndex].done = newdone;\n      return newTasks;\n    });\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container register-container card pt-3 pb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, isRegistered ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(List, {\n    onAdd: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }), tasks.map((task, index) => /*#__PURE__*/React.createElement(Task, Object.assign({\n    key: task.name\n  }, task, {\n    onTrash: () => removeTask(index),\n    onToggle: done => updateTaskDone(index, done),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }\n  })))) : /*#__PURE__*/React.createElement(Register, {\n    submit: registrationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  })\n  // <Register></Register>\n  )));\n}\n;\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","Register","List","Task","App","isRegistered","setIsRegistered","email","setEmail","password","setPassword","tasks","setTasks","registrationHandler","event","preventDefault","localStorage","setItem","JSON","stringify","parse","getItem","addTask","name","prevTasks","done","removeTask","indexToRemove","prev","filter","taskObject","index","updateTaskDone","taskIndex","newdone","newTasks","createElement","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","map","task","Object","assign","key","onTrash","onToggle","submit"],"sources":["/home/iteamandroid/Desktop/Learning/ReactJs/react-crud/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Register from \"./Components/Register\";\nimport List from \"./Components/List\";\nimport Task from \"./Components/Task\";\n\n\nfunction App() {\n\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n\n    const registrationHandler = (event) => {\n        setEmail(email);\n        setPassword(password);\n        setIsRegistered(true);\n        event.preventDefault();\n    };\n\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks]);\n\n    useEffect(() => {\n        const tasks = JSON.parse(localStorage.getItem('tasks'));\n        setTasks(tasks);\n    }, []);\n\n    const addTask = (name) => {\n        setTasks(prevTasks => [...prevTasks, { name: name, done: false }]);\n    };\n\n    function removeTask(indexToRemove) {\n        setTasks(prev => {\n            return prev.filter((taskObject, index) => index !== indexToRemove);\n        });\n\n    }\n\n    function updateTaskDone(taskIndex, newdone) {\n        setTasks(prev => {\n            const newTasks = [...prev];\n            newTasks[taskIndex].done = newdone;\n            return newTasks;\n        });\n    }\n\n    return (\n        <><div className=\"main\">\n            <div className=\"container register-container card pt-3 pb-3\">\n\n                {isRegistered ? (\n                    <>\n                        <List onAdd={addTask}></List>\n                        {tasks.map((task, index) => (\n                            <Task key={task.name} {...task}\n                                onTrash={() => removeTask(index)}\n                                onToggle={done => updateTaskDone(index, done)} />\n                        ))}\n                    </>\n                ) : (\n                    <Register submit={registrationHandler}></Register>\n                    // <Register></Register>\n                )}\n            </div>\n        </div></>\n    );\n};\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,IAAI,MAAM,mBAAmB;AAGpC,SAASC,GAAGA,CAAA,EAAG;EAEX,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,mBAAmB,GAAIC,KAAK,IAAK;IACnCN,QAAQ,CAACD,KAAK,CAAC;IACfG,WAAW,CAACD,QAAQ,CAAC;IACrBH,eAAe,CAAC,IAAI,CAAC;IACrBQ,KAAK,CAACC,cAAc,CAAC,CAAC;EAC1B,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZiB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEXZ,SAAS,CAAC,MAAM;IACZ,MAAMY,KAAK,GAAGO,IAAI,CAACE,KAAK,CAACJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,CAAC;IACvDT,QAAQ,CAACD,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,OAAO,GAAIC,IAAI,IAAK;IACtBX,QAAQ,CAACY,SAAS,IAAI,CAAC,GAAGA,SAAS,EAAE;MAAED,IAAI,EAAEA,IAAI;MAAEE,IAAI,EAAE;IAAM,CAAC,CAAC,CAAC;EACtE,CAAC;EAED,SAASC,UAAUA,CAACC,aAAa,EAAE;IAC/Bf,QAAQ,CAACgB,IAAI,IAAI;MACb,OAAOA,IAAI,CAACC,MAAM,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAKA,KAAK,KAAKJ,aAAa,CAAC;IACtE,CAAC,CAAC;EAEN;EAEA,SAASK,cAAcA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACxCtB,QAAQ,CAACgB,IAAI,IAAI;MACb,MAAMO,QAAQ,GAAG,CAAC,GAAGP,IAAI,CAAC;MAC1BO,QAAQ,CAACF,SAAS,CAAC,CAACR,IAAI,GAAGS,OAAO;MAClC,OAAOC,QAAQ;IACnB,CAAC,CAAC;EACN;EAEA,oBACIrC,KAAA,CAAAsC,aAAA,CAAAtC,KAAA,CAAAuC,QAAA,qBAAEvC,KAAA,CAAAsC,aAAA;IAAKE,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnB9C,KAAA,CAAAsC,aAAA;IAAKE,SAAS,EAAC,6CAA6C;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEvDvC,YAAY,gBACTP,KAAA,CAAAsC,aAAA,CAAAtC,KAAA,CAAAuC,QAAA,qBACIvC,KAAA,CAAAsC,aAAA,CAAClC,IAAI;IAAC2C,KAAK,EAAEvB,OAAQ;IAAAiB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAAC,EAC5BjC,KAAK,CAACmC,GAAG,CAAC,CAACC,IAAI,EAAEhB,KAAK,kBACnBjC,KAAA,CAAAsC,aAAA,CAACjC,IAAI,EAAA6C,MAAA,CAAAC,MAAA;IAACC,GAAG,EAAEH,IAAI,CAACxB;EAAK,GAAKwB,IAAI;IAC1BI,OAAO,EAAEA,CAAA,KAAMzB,UAAU,CAACK,KAAK,CAAE;IACjCqB,QAAQ,EAAE3B,IAAI,IAAIO,cAAc,CAACD,KAAK,EAAEN,IAAI,CAAE;IAAAc,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAE,CACvD,CACH,CAAC,gBAEH9C,KAAA,CAAAsC,aAAA,CAACnC,QAAQ;IAACoD,MAAM,EAAExC,mBAAoB;IAAA0B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAW;EACjD;EAEH,CACJ,CAAG,CAAC;AAEjB;AAAC;AAED,eAAexC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}