{"ast":null,"code":"var _jsxFileName = \"E:\\\\Krishna_Work\\\\React_Js\\\\github_clone\\\\react-crud\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Register from \"./Components/Register\";\nimport List from \"./Components/List\";\nimport Task from \"./Components/Task\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [, setEmail] = useState(null);\n  const [, setPassword] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const registrationHandler = event => {\n    setEmail(event.target.email.value);\n    setPassword(event.target.password.value);\n    setIsRegistered(true);\n    event.preventDefault();\n  };\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    setTasks(tasks);\n  }, []);\n  const addTask = name => {\n    setTasks(prevTasks => [...prevTasks, {\n      name: name,\n      done: false\n    }]);\n  };\n  function removeTask(indexToRemove) {\n    setTasks(prev => {\n      return prev.filter((taskObject, index) => index !== indexToRemove);\n    });\n  }\n  function updateTaskDone(taskIndex, newdone) {\n    setTasks(prev => {\n      const newTasks = [...prev];\n      newTasks[taskIndex].done = newdone;\n      return newTasks;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container register-container card pt-3 pb-3\",\n      children: isRegistered ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(List, {\n          onAdd: addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n          ...task,\n          onTrash: () => removeTask(index),\n          onToggle: done => updateTaskDone(index, done)\n        }, task.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Register, {\n        submit: registrationHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MKj0u4lag/W/GmrkEV52LQGehZg=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Register","List","Task","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isRegistered","setIsRegistered","setEmail","setPassword","tasks","setTasks","registrationHandler","event","target","email","value","password","preventDefault","localStorage","setItem","JSON","stringify","parse","getItem","addTask","name","prevTasks","done","removeTask","indexToRemove","prev","filter","taskObject","index","updateTaskDone","taskIndex","newdone","newTasks","className","children","onAdd","fileName","_jsxFileName","lineNumber","columnNumber","map","task","onTrash","onToggle","submit","_c","$RefreshReg$"],"sources":["E:/Krishna_Work/React_Js/github_clone/react-crud/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Register from \"./Components/Register\";\r\nimport List from \"./Components/List\";\r\nimport Task from \"./Components/Task\";\r\nfunction App() {\r\n  const [isRegistered, setIsRegistered] = useState(false);\r\n  const [, setEmail] = useState(null);\r\n  const [, setPassword] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const registrationHandler = (event) => {\r\n    setEmail(event.target.email.value);\r\n    setPassword(event.target.password.value);\r\n    setIsRegistered(true);\r\n    event.preventDefault();\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  useEffect(() => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\r\n  setTasks(tasks);\r\n  },[]);\r\n\r\n  const addTask = (name) => {\r\n    setTasks(prevTasks => [...prevTasks, { name: name, done: false }]);\r\n  };\r\n\r\n  function removeTask(indexToRemove){\r\n    setTasks(prev => {\r\n      return prev.filter ((taskObject,index) => index !== indexToRemove);\r\n      });\r\n\r\n  }\r\n\r\n  function updateTaskDone(taskIndex, newdone) {\r\n    setTasks(prev => {\r\n      const newTasks = [...prev];\r\n      newTasks[taskIndex].done = newdone;\r\n      return newTasks;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"container register-container card pt-3 pb-3\">\r\n      \r\n        {isRegistered ? (\r\n          <>\r\n            <List onAdd={addTask}></List>\r\n            {tasks.map((task,index ) => (\r\n              <Task key={task.name} {...task} \r\n              onTrash={() => removeTask(index)}\r\n              onToggle={done => updateTaskDone(index, done) } />\r\n            ))}\r\n          </>\r\n        ) : (\r\n          <Register submit={registrationHandler}></Register>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}